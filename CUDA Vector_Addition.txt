#include <iostream>
#include <cuda_runtime.h>

using namespace std;

// CUDA kernel function to add two vectors
__global__ void vectorAdd(int *A, int *B, int *C, int N) {
    int index = threadIdx.x + blockIdx.x * blockDim.x;
    if (index < N) {
        C[index] = A[index] + B[index];
    }
}

int main() {
    int N = 1000000;  // Size of the vectors

    // Allocate memory for host vectors
    int *h_A = new int[N];
    int *h_B = new int[N];
    int *h_C = new int[N];

    // Initialize vectors A and B with values
    for (int i = 0; i < N; i++) {
        h_A[i] = i;
        h_B[i] = i * 2;
    }

    // Allocate memory for device vectors
    int *d_A, *d_B, *d_C;
    cudaMalloc((void**)&d_A, N * sizeof(int));
    cudaMalloc((void**)&d_B, N * sizeof(int));
    cudaMalloc((void**)&d_C, N * sizeof(int));

    // Copy input vectors from host to device
    cudaMemcpy(d_A, h_A, N * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(d_B, h_B, N * sizeof(int), cudaMemcpyHostToDevice);

    // Launch CUDA kernel with N elements, using 256 threads per block
    int blockSize = 256;
    int numBlocks = (N + blockSize - 1) / blockSize;  // Ensure enough blocks to cover all elements
    vectorAdd<<<numBlocks, blockSize>>>(d_A, d_B, d_C, N);

    // Check for any kernel launch errors
    cudaDeviceSynchronize();

    // Copy the result from device to host
    cudaMemcpy(h_C, d_C, N * sizeof(int), cudaMemcpyDeviceToHost);

    // Output the first 10 results as a sample
    for (int i = 0; i < 10; i++) {
        cout << "C[" << i << "] = " << h_C[i] << endl;
    }

    // Free device memory
    cudaFree(d_A);
    cudaFree(d_B);
    cudaFree(d_C);

    // Free host memory
    delete[] h_A;
    delete[] h_B;
    delete[] h_C;

    return 0;
}
